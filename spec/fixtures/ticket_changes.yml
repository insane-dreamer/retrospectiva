--- 
agents_ticket_update:
  id: 1
  ticket_id: 4
  author: Agent
  content: Agent's update
  updates: {}
  email: agent@somedomain.com
  user_id: 3
  created_at: <%= 2.days.ago.to_formatted_s(:db) %>
another_open_update:
  id: 2
  ticket_id: 3
  author: Somebody
  content: Somebody's update
  updates: {}
  email: somebody@somedomain.com
  created_at: <%= 2.months.ago.to_formatted_s(:db) %>
special_update_01_new_property_no_content: 
  author: Agent
  id: 3
  updates: |
    --- 
    Milestone: 
      :old: 
      :new: Future milestone 2
  ticket_id: 9
  content: 
  created_at: 2000-01-03 21:30:00
special_update_02_properties_and_content: 
  author: Me
  id: 4
  updates: |
    --- 
    Status: 
      :old: Open
      :new: WontFix
    Priority: 
      :old: Normal
      :new: Minor
  ticket_id: 9
  content: |
    Yes, this is the expected behaviour when you are working with with SVN repositories. Retrospectiva (as a typical RubyOnRails application) uses ~40M of RAM, the rest is consumed by the Ruby-SVN bindings (for various reasons). The memory consumption is directly proportional to the size of your repository, but your demand of ~100M of RAM seems quite reasonable to me.

    Donâ€™t worry, the memory allocation will not continue growing.

    Regards[[BR]]
    Dimitrij  
  created_at: 2000-01-04 21:30:00
special_update_03_no_properties_just_content: 
  author: Me
  id: 5
  ticket_id: 9
  content: |
    Try to change

    {{{
      @@gc_count = (@@gc_count + 1) % 20
    }}}
    
    to a lower value, eg:

    {{{
      @@gc_count = (@@gc_count + 1) % 10
    }}}

    This should slow-down your memory growth (and the SVN processing speed :-().

  created_at: 2000-01-05 21:30:00
special_update_last: 
  author: Me
  id: 6
  updates: |
    --- 
    Status: 
      :old: WontFix
      :new: Open
    Priority: 
      :old: Minor
      :new: Enhancement
  ticket_id: 9
  content: 
  created_at: 2000-01-06 21:30:00
